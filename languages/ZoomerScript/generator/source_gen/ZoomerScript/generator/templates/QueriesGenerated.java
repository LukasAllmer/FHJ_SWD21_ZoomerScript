package ZoomerScript.generator.templates;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.impl.query.QueryProviderBase;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import jetbrains.mps.generator.template.MapSrcMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.text.behavior.Word__BehaviorDescriptor;
import jetbrains.mps.lang.text.behavior.IHoldLines__BehaviorDescriptor;
import java.util.Map;
import jetbrains.mps.generator.impl.query.SourceNodeQuery;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.impl.query.QueryKey;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.generator.impl.GenerationFailureException;
import jetbrains.mps.generator.impl.query.SourceNodesQuery;
import java.util.Collection;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.generator.impl.query.PropertyValueQuery;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.generator.impl.query.ReferenceTargetQuery;
import jetbrains.mps.generator.impl.query.MapNodeQuery;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;

@Generated
public class QueriesGenerated extends QueryProviderBase {
  public QueriesGenerated() {
    super(1);
  }
  public static Object propertyMacro_GetValue_1_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_1(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_2(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_1_3(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_2_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_5_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getInteger(_context.getNode(), PROPS.value$mD0y);
  }
  public static Object propertyMacro_GetValue_8_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getBoolean(_context.getNode(), PROPS.value$zw11);
  }
  public static Object referenceMacro_GetReferent_4_0(final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.target$bl3V), PROPS.name$MnvL);
  }
  public static Object referenceMacro_GetReferent_6_0(final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.left$av_6), LINKS.target$bl3V), PROPS.name$MnvL);
  }
  public static SNode sourceNodeQuery_2_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.type$OLfa);
  }
  public static SNode sourceNodeQuery_2_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.initialization$YEwi);
  }
  public static SNode sourceNodeQuery_6_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$e7oy);
  }
  public static SNode sourceNodeQuery_9_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.condition$E5qj);
  }
  public static SNode sourceNodeQuery_10_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.condition$E5qj);
  }
  public static SNode sourceNodeQuery_11_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$swAW);
  }
  public static SNode sourceNodeQuery_11_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$rV4s);
  }
  public static SNode sourceNodeQuery_12_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$vRRp);
  }
  public static SNode sourceNodeQuery_12_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$vS6q);
  }
  public static SNode sourceNodeQuery_13_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$ZO_T);
  }
  public static SNode sourceNodeQuery_13_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$ZOOU);
  }
  public static SNode sourceNodeQuery_14_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.left$aJDp);
  }
  public static SNode sourceNodeQuery_14_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.right$aJSq);
  }
  public static Iterable<SNode> sourceNodesQuery_1_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.body$9kqT);
  }
  public static Iterable<SNode> sourceNodesQuery_9_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.trueBlock$LUxg);
  }
  public static Iterable<SNode> sourceNodesQuery_10_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.trueBlock$LUxg);
  }
  public static Iterable<SNode> sourceNodesQuery_10_1(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.elseBlock$iobQ);
  }
  public static SNode mapSrcMacro_map_15_0(final MapSrcMacroContext _context) {
    SNode comment = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x57d533a7af15ed3aL, "jetbrains.mps.baseLanguage.structure.SingleLineComment"));
    SNode line = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x2331694e561af166L, "jetbrains.mps.lang.text.structure.Line"));
    SNode w = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, "jetbrains.mps.lang.text.structure.Word"));
    SPropertyOperations.assign(w, PROPS.value$zQr_, SPropertyOperations.getString(_context.getNode(), PROPS.text$16Yz));
    ListSequence.fromList(SLinkOperations.getChildren(line, LINKS.elements$_j45)).addElement(w);
    Word__BehaviorDescriptor.normalize_id3yV2h2COV$s.invoke(w);
    IHoldLines__BehaviorDescriptor.addLine_id7q4YwcerggR.invoke(comment, line);
    return comment;
  }
  private final Map<String, SourceNodeQuery> snqMethods = new HashMap<String, SourceNodeQuery>();
  {
    int i = 0;
    snqMethods.put("8288888793561809733", new SNQ(i++));
    snqMethods.put("8288888793561811295", new SNQ(i++));
    snqMethods.put("8288888793562106870", new SNQ(i++));
    snqMethods.put("8288888793562558403", new SNQ(i++));
    snqMethods.put("8288888793562587174", new SNQ(i++));
    snqMethods.put("8288888793562688198", new SNQ(i++));
    snqMethods.put("8288888793562687835", new SNQ(i++));
    snqMethods.put("8288888793562858638", new SNQ(i++));
    snqMethods.put("8288888793562858630", new SNQ(i++));
    snqMethods.put("8288888793562862962", new SNQ(i++));
    snqMethods.put("8288888793562862970", new SNQ(i++));
    snqMethods.put("8288888793562867239", new SNQ(i++));
    snqMethods.put("8288888793562867231", new SNQ(i++));
  }
  @NotNull
  @Override
  public SourceNodeQuery getSourceNodeQuery(@NotNull QueryKey identity) {
    SourceNodeQuery query = identity.forFunctionNode(snqMethods);
    return (query != null ? query : super.getSourceNodeQuery(identity));
  }
  private static class SNQ implements SourceNodeQuery {
    private final int methodKey;
    public SNQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @Nullable
    public SNode evaluate(@NotNull SourceSubstituteMacroNodeContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.sourceNodeQuery_2_0(ctx);
        case 1:
          return QueriesGenerated.sourceNodeQuery_2_1(ctx);
        case 2:
          return QueriesGenerated.sourceNodeQuery_6_0(ctx);
        case 3:
          return QueriesGenerated.sourceNodeQuery_9_0(ctx);
        case 4:
          return QueriesGenerated.sourceNodeQuery_10_0(ctx);
        case 5:
          return QueriesGenerated.sourceNodeQuery_11_0(ctx);
        case 6:
          return QueriesGenerated.sourceNodeQuery_11_1(ctx);
        case 7:
          return QueriesGenerated.sourceNodeQuery_12_0(ctx);
        case 8:
          return QueriesGenerated.sourceNodeQuery_12_1(ctx);
        case 9:
          return QueriesGenerated.sourceNodeQuery_13_0(ctx);
        case 10:
          return QueriesGenerated.sourceNodeQuery_13_1(ctx);
        case 11:
          return QueriesGenerated.sourceNodeQuery_14_0(ctx);
        case 12:
          return QueriesGenerated.sourceNodeQuery_14_1(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, SourceNodesQuery> snsqMethods = new HashMap<String, SourceNodesQuery>();
  {
    int i = 0;
    snsqMethods.put("8288888793561767153", new SNsQ(i++));
    snsqMethods.put("8288888793562558774", new SNsQ(i++));
    snsqMethods.put("8288888793562587561", new SNsQ(i++));
    snsqMethods.put("8288888793562588493", new SNsQ(i++));
  }
  @NotNull
  @Override
  public SourceNodesQuery getSourceNodesQuery(@NotNull QueryKey identity) {
    SourceNodesQuery query = identity.forFunctionNode(snsqMethods);
    return (query != null ? query : super.getSourceNodesQuery(identity));
  }
  private static class SNsQ implements SourceNodesQuery {
    private final int methodKey;
    public SNsQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @NotNull
    public Collection<SNode> evaluate(@NotNull SourceSubstituteMacroNodesContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_0(ctx));
        case 1:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_9_0(ctx));
        case 2:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_10_0(ctx));
        case 3:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_10_1(ctx));
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, PropertyValueQuery> pvqMethods = new HashMap<String, PropertyValueQuery>();
  {
    int i = 0;
    pvqMethods.put("8288888793561558488", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), null));
    pvqMethods.put("8288888793562241399", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, 0xf93d565d11L, "value"), "class"));
    pvqMethods.put("8288888793562252350", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, 0xf93d565d11L, "value"), "class"));
    pvqMethods.put("8288888793561556741", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "map_Script"));
    pvqMethods.put("8288888793561808482", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "newVar"));
    pvqMethods.put("8288888793561964208", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "5"));
    pvqMethods.put("8288888793562311932", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b201L, 0xf8cc56b202L, "value"), "true"));
  }
  @NotNull
  @Override
  public PropertyValueQuery getPropertyValueQuery(@NotNull QueryKey identity) {
    PropertyValueQuery query = identity.forTemplateNode(pvqMethods);
    return (query != null ? query : super.getPropertyValueQuery(identity));
  }
  private static class PVQ extends PropertyValueQuery.Base {
    private final int methodKey;
    /*package*/ PVQ(int methodKey, SProperty property, String templateValue) {
      super(property, templateValue);
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull PropertyMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.propertyMacro_GetValue_1_0(ctx);
        case 1:
          return QueriesGenerated.propertyMacro_GetValue_1_1(ctx);
        case 2:
          return QueriesGenerated.propertyMacro_GetValue_1_2(ctx);
        case 3:
          return QueriesGenerated.propertyMacro_GetValue_1_3(ctx);
        case 4:
          return QueriesGenerated.propertyMacro_GetValue_2_0(ctx);
        case 5:
          return QueriesGenerated.propertyMacro_GetValue_5_0(ctx);
        case 6:
          return QueriesGenerated.propertyMacro_GetValue_8_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, ReferenceTargetQuery> rtqMethods = new HashMap<String, ReferenceTargetQuery>();
  {
    rtqMethods.put("8288888793561898008", new RTQ(0, "variable"));
    rtqMethods.put("8288888793562097903", new RTQ(1, "var1"));
  }
  @NotNull
  @Override
  public ReferenceTargetQuery getReferenceTargetQuery(@NotNull QueryKey queryKey) {
    ReferenceTargetQuery query = queryKey.forTemplateNode(rtqMethods);
    return (query != null ? query : super.getReferenceTargetQuery(queryKey));
  }
  private static class RTQ extends ReferenceTargetQuery.Base {
    private final int methodKey;
    /*package*/ RTQ(int methodKey, String templateValue) {
      super(templateValue);
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull ReferenceMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.referenceMacro_GetReferent_4_0(ctx);
        case 1:
          return QueriesGenerated.referenceMacro_GetReferent_6_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, MapNodeQuery> mnqMethods = new HashMap<String, MapNodeQuery>();
  {
    mnqMethods.put("8888373101270176171", new MNQ(0));
  }
  @NotNull
  @Override
  public MapNodeQuery getMapNodeQuery(@NotNull QueryKey queryKey) {
    MapNodeQuery query = queryKey.forTemplateNode(mnqMethods);
    return (query != null ? query : super.getMapNodeQuery(queryKey));
  }
  private static class MNQ implements MapNodeQuery {
    private final int methodKey;
    /*package*/ MNQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @Nullable
    public SNode evaluate(@NotNull MapSrcMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.mapSrcMacro_map_15_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty value$mD0y = MetaAdapterFactory.getProperty(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf95ed8L, 0x73080c70faf95f5bL, "value");
    /*package*/ static final SProperty value$zw11 = MetaAdapterFactory.getProperty(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faff6432L, 0x73080c70faff6467L, "value");
    /*package*/ static final SProperty value$zQr_ = MetaAdapterFactory.getProperty(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, 0x229012ddae35f05L, "value");
    /*package*/ static final SProperty text$16Yz = MetaAdapterFactory.getProperty(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb099a8dL, 0x73080c70fb09a1f1L, "text");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink target$bl3V = MetaAdapterFactory.getReferenceLink(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf74f5fL, 0x73080c70faf74fafL, "target");
    /*package*/ static final SContainmentLink left$av_6 = MetaAdapterFactory.getContainmentLink(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fafb311eL, 0x73080c70fafb31b0L, "left");
    /*package*/ static final SContainmentLink type$OLfa = MetaAdapterFactory.getContainmentLink(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf68f6eL, 0x73080c70faf6901bL, "type");
    /*package*/ static final SContainmentLink initialization$YEwi = MetaAdapterFactory.getContainmentLink(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf68f6eL, 0x73080c70faf6c9acL, "initialization");
    /*package*/ static final SContainmentLink right$e7oy = MetaAdapterFactory.getContainmentLink(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fafb311eL, 0x73080c70fafb321aL, "right");
    /*package*/ static final SContainmentLink condition$E5qj = MetaAdapterFactory.getContainmentLink(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb00918dL, 0x73080c70fb0093daL, "condition");
    /*package*/ static final SContainmentLink right$swAW = MetaAdapterFactory.getContainmentLink(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb050053L, 0x73080c70fb0500e6L, "right");
    /*package*/ static final SContainmentLink left$rV4s = MetaAdapterFactory.getContainmentLink(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb050053L, 0x73080c70fb0500afL, "left");
    /*package*/ static final SContainmentLink left$vRRp = MetaAdapterFactory.getContainmentLink(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb07b9c3L, 0x73080c70fb07b9c4L, "left");
    /*package*/ static final SContainmentLink right$vS6q = MetaAdapterFactory.getContainmentLink(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb07b9c3L, 0x73080c70fb07b9c5L, "right");
    /*package*/ static final SContainmentLink left$ZO_T = MetaAdapterFactory.getContainmentLink(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb07d0b8L, 0x73080c70fb07d0b9L, "left");
    /*package*/ static final SContainmentLink right$ZOOU = MetaAdapterFactory.getContainmentLink(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb07d0b8L, 0x73080c70fb07d0baL, "right");
    /*package*/ static final SContainmentLink left$aJDp = MetaAdapterFactory.getContainmentLink(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb07dba6L, 0x73080c70fb07dba7L, "left");
    /*package*/ static final SContainmentLink right$aJSq = MetaAdapterFactory.getContainmentLink(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb07dba6L, 0x73080c70fb07dba8L, "right");
    /*package*/ static final SContainmentLink body$9kqT = MetaAdapterFactory.getContainmentLink(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf36806L, 0x73080c70faf36880L, "body");
    /*package*/ static final SContainmentLink trueBlock$LUxg = MetaAdapterFactory.getContainmentLink(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb00921eL, 0x73080c70fb0094d6L, "trueBlock");
    /*package*/ static final SContainmentLink elseBlock$iobQ = MetaAdapterFactory.getContainmentLink(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb039bb4L, 0x73080c70fb039be9L, "elseBlock");
    /*package*/ static final SContainmentLink elements$_j45 = MetaAdapterFactory.getContainmentLink(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x2331694e561af166L, 0x2331694e561af167L, "elements");
  }
}
