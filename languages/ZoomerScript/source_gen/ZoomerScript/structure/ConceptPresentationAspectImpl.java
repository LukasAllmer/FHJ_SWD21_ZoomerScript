package ZoomerScript.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AbstractDeclaration;
  private ConceptPresentation props_AbstractExpression;
  private ConceptPresentation props_AbstractFlowOfControl;
  private ConceptPresentation props_Addition;
  private ConceptPresentation props_Assignment;
  private ConceptPresentation props_BooleanConstant;
  private ConceptPresentation props_BooleanType;
  private ConceptPresentation props_Comment;
  private ConceptPresentation props_ConditionalControl;
  private ConceptPresentation props_Division;
  private ConceptPresentation props_EmptyLine;
  private ConceptPresentation props_If;
  private ConceptPresentation props_IfElse;
  private ConceptPresentation props_LogicExpression;
  private ConceptPresentation props_Multiplication;
  private ConceptPresentation props_NumericConstant;
  private ConceptPresentation props_NumericExpression;
  private ConceptPresentation props_NumericType;
  private ConceptPresentation props_Script;
  private ConceptPresentation props_ScriptLine;
  private ConceptPresentation props_Subtraction;
  private ConceptPresentation props_Type;
  private ConceptPresentation props_VariableDeclaration;
  private ConceptPresentation props_VariableReference;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractDeclaration:
        if (props_AbstractDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractDeclaration = cpb.create();
        }
        return props_AbstractDeclaration;
      case LanguageConceptSwitch.AbstractExpression:
        if (props_AbstractExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractExpression = cpb.create();
        }
        return props_AbstractExpression;
      case LanguageConceptSwitch.AbstractFlowOfControl:
        if (props_AbstractFlowOfControl == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractFlowOfControl = cpb.create();
        }
        return props_AbstractFlowOfControl;
      case LanguageConceptSwitch.Addition:
        if (props_Addition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("+");
          props_Addition = cpb.create();
        }
        return props_Addition;
      case LanguageConceptSwitch.Assignment:
        if (props_Assignment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("=");
          props_Assignment = cpb.create();
        }
        return props_Assignment;
      case LanguageConceptSwitch.BooleanConstant:
        if (props_BooleanConstant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BooleanConstant");
          props_BooleanConstant = cpb.create();
        }
        return props_BooleanConstant;
      case LanguageConceptSwitch.BooleanType:
        if (props_BooleanType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("fr?");
          props_BooleanType = cpb.create();
        }
        return props_BooleanType;
      case LanguageConceptSwitch.Comment:
        if (props_Comment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("//");
          props_Comment = cpb.create();
        }
        return props_Comment;
      case LanguageConceptSwitch.ConditionalControl:
        if (props_ConditionalControl == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ConditionalControl = cpb.create();
        }
        return props_ConditionalControl;
      case LanguageConceptSwitch.Division:
        if (props_Division == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("/");
          props_Division = cpb.create();
        }
        return props_Division;
      case LanguageConceptSwitch.EmptyLine:
        if (props_EmptyLine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EmptyLine");
          props_EmptyLine = cpb.create();
        }
        return props_EmptyLine;
      case LanguageConceptSwitch.If:
        if (props_If == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("If");
          props_If = cpb.create();
        }
        return props_If;
      case LanguageConceptSwitch.IfElse:
        if (props_IfElse == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("IfElse");
          props_IfElse = cpb.create();
        }
        return props_IfElse;
      case LanguageConceptSwitch.LogicExpression:
        if (props_LogicExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_LogicExpression = cpb.create();
        }
        return props_LogicExpression;
      case LanguageConceptSwitch.Multiplication:
        if (props_Multiplication == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("*");
          props_Multiplication = cpb.create();
        }
        return props_Multiplication;
      case LanguageConceptSwitch.NumericConstant:
        if (props_NumericConstant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("NumericConstant");
          props_NumericConstant = cpb.create();
        }
        return props_NumericConstant;
      case LanguageConceptSwitch.NumericExpression:
        if (props_NumericExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_NumericExpression = cpb.create();
        }
        return props_NumericExpression;
      case LanguageConceptSwitch.NumericType:
        if (props_NumericType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("num");
          props_NumericType = cpb.create();
        }
        return props_NumericType;
      case LanguageConceptSwitch.Script:
        if (props_Script == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Script = cpb.create();
        }
        return props_Script;
      case LanguageConceptSwitch.ScriptLine:
        if (props_ScriptLine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ScriptLine = cpb.create();
        }
        return props_ScriptLine;
      case LanguageConceptSwitch.Subtraction:
        if (props_Subtraction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("-");
          props_Subtraction = cpb.create();
        }
        return props_Subtraction;
      case LanguageConceptSwitch.Type:
        if (props_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Type = cpb.create();
        }
        return props_Type;
      case LanguageConceptSwitch.VariableDeclaration:
        if (props_VariableDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_VariableDeclaration = cpb.create();
        }
        return props_VariableDeclaration;
      case LanguageConceptSwitch.VariableReference:
        if (props_VariableReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf74f5fL, 0x73080c70faf74fafL, "target", "", "");
          props_VariableReference = cpb.create();
        }
        return props_VariableReference;
    }
    return null;
  }
}
