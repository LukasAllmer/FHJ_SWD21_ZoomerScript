package ZoomerScript.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AbstractDeclaration = 0;
  public static final int AbstractExpression = 1;
  public static final int AbstractFlowOfControl = 2;
  public static final int Addition = 3;
  public static final int Assignment = 4;
  public static final int BooleanConstant = 5;
  public static final int BooleanType = 6;
  public static final int Comment = 7;
  public static final int ConditionalControl = 8;
  public static final int Division = 9;
  public static final int EmptyLine = 10;
  public static final int If = 11;
  public static final int IfElse = 12;
  public static final int LogicExpression = 13;
  public static final int Multiplication = 14;
  public static final int NumericConstant = 15;
  public static final int NumericExpression = 16;
  public static final int NumericType = 17;
  public static final int Script = 18;
  public static final int ScriptLine = 19;
  public static final int Subtraction = 20;
  public static final int Type = 21;
  public static final int VariableDeclaration = 22;
  public static final int VariableReference = 23;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L);
    builder.put(0x73080c70faf74d9bL, AbstractDeclaration);
    builder.put(0x73080c70faf36843L, AbstractExpression);
    builder.put(0x73080c70fb009109L, AbstractFlowOfControl);
    builder.put(0x73080c70fb050053L, Addition);
    builder.put(0x73080c70fafb311eL, Assignment);
    builder.put(0x73080c70faff6432L, BooleanConstant);
    builder.put(0x73080c70faff5d09L, BooleanType);
    builder.put(0x73080c70fb099a8dL, Comment);
    builder.put(0x73080c70fb00918dL, ConditionalControl);
    builder.put(0x73080c70fb07dba6L, Division);
    builder.put(0x73080c70fb0baf95L, EmptyLine);
    builder.put(0x73080c70fb00921eL, If);
    builder.put(0x73080c70fb039bb4L, IfElse);
    builder.put(0x73080c70fb009260L, LogicExpression);
    builder.put(0x73080c70fb07d0b8L, Multiplication);
    builder.put(0x73080c70faf95ed8L, NumericConstant);
    builder.put(0x73080c70fb04ff3eL, NumericExpression);
    builder.put(0x73080c70faf560ddL, NumericType);
    builder.put(0x73080c70faf36806L, Script);
    builder.put(0x73080c70faf8a63eL, ScriptLine);
    builder.put(0x73080c70fb07b9c3L, Subtraction);
    builder.put(0x73080c70faf56073L, Type);
    builder.put(0x73080c70faf68f6eL, VariableDeclaration);
    builder.put(0x73080c70faf74f5fL, VariableReference);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
