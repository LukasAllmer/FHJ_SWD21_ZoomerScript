package ZoomerScript.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAbstractDeclaration = createDescriptorForAbstractDeclaration();
  /*package*/ final ConceptDescriptor myConceptAbstractExpression = createDescriptorForAbstractExpression();
  /*package*/ final ConceptDescriptor myConceptAbstractFlowOfControl = createDescriptorForAbstractFlowOfControl();
  /*package*/ final ConceptDescriptor myConceptAddition = createDescriptorForAddition();
  /*package*/ final ConceptDescriptor myConceptAssignment = createDescriptorForAssignment();
  /*package*/ final ConceptDescriptor myConceptBooleanConstant = createDescriptorForBooleanConstant();
  /*package*/ final ConceptDescriptor myConceptBooleanType = createDescriptorForBooleanType();
  /*package*/ final ConceptDescriptor myConceptComment = createDescriptorForComment();
  /*package*/ final ConceptDescriptor myConceptConditionalControl = createDescriptorForConditionalControl();
  /*package*/ final ConceptDescriptor myConceptDivision = createDescriptorForDivision();
  /*package*/ final ConceptDescriptor myConceptEmptyLine = createDescriptorForEmptyLine();
  /*package*/ final ConceptDescriptor myConceptIf = createDescriptorForIf();
  /*package*/ final ConceptDescriptor myConceptIfElse = createDescriptorForIfElse();
  /*package*/ final ConceptDescriptor myConceptLogicExpression = createDescriptorForLogicExpression();
  /*package*/ final ConceptDescriptor myConceptMultiplication = createDescriptorForMultiplication();
  /*package*/ final ConceptDescriptor myConceptNumericConstant = createDescriptorForNumericConstant();
  /*package*/ final ConceptDescriptor myConceptNumericExpression = createDescriptorForNumericExpression();
  /*package*/ final ConceptDescriptor myConceptNumericType = createDescriptorForNumericType();
  /*package*/ final ConceptDescriptor myConceptScript = createDescriptorForScript();
  /*package*/ final ConceptDescriptor myConceptScriptLine = createDescriptorForScriptLine();
  /*package*/ final ConceptDescriptor myConceptSubtraction = createDescriptorForSubtraction();
  /*package*/ final ConceptDescriptor myConceptType = createDescriptorForType();
  /*package*/ final ConceptDescriptor myConceptVariableDeclaration = createDescriptorForVariableDeclaration();
  /*package*/ final ConceptDescriptor myConceptVariableReference = createDescriptorForVariableReference();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbstractDeclaration, myConceptAbstractExpression, myConceptAbstractFlowOfControl, myConceptAddition, myConceptAssignment, myConceptBooleanConstant, myConceptBooleanType, myConceptComment, myConceptConditionalControl, myConceptDivision, myConceptEmptyLine, myConceptIf, myConceptIfElse, myConceptLogicExpression, myConceptMultiplication, myConceptNumericConstant, myConceptNumericExpression, myConceptNumericType, myConceptScript, myConceptScriptLine, myConceptSubtraction, myConceptType, myConceptVariableDeclaration, myConceptVariableReference);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.AbstractDeclaration:
        return myConceptAbstractDeclaration;
      case LanguageConceptSwitch.AbstractExpression:
        return myConceptAbstractExpression;
      case LanguageConceptSwitch.AbstractFlowOfControl:
        return myConceptAbstractFlowOfControl;
      case LanguageConceptSwitch.Addition:
        return myConceptAddition;
      case LanguageConceptSwitch.Assignment:
        return myConceptAssignment;
      case LanguageConceptSwitch.BooleanConstant:
        return myConceptBooleanConstant;
      case LanguageConceptSwitch.BooleanType:
        return myConceptBooleanType;
      case LanguageConceptSwitch.Comment:
        return myConceptComment;
      case LanguageConceptSwitch.ConditionalControl:
        return myConceptConditionalControl;
      case LanguageConceptSwitch.Division:
        return myConceptDivision;
      case LanguageConceptSwitch.EmptyLine:
        return myConceptEmptyLine;
      case LanguageConceptSwitch.If:
        return myConceptIf;
      case LanguageConceptSwitch.IfElse:
        return myConceptIfElse;
      case LanguageConceptSwitch.LogicExpression:
        return myConceptLogicExpression;
      case LanguageConceptSwitch.Multiplication:
        return myConceptMultiplication;
      case LanguageConceptSwitch.NumericConstant:
        return myConceptNumericConstant;
      case LanguageConceptSwitch.NumericExpression:
        return myConceptNumericExpression;
      case LanguageConceptSwitch.NumericType:
        return myConceptNumericType;
      case LanguageConceptSwitch.Script:
        return myConceptScript;
      case LanguageConceptSwitch.ScriptLine:
        return myConceptScriptLine;
      case LanguageConceptSwitch.Subtraction:
        return myConceptSubtraction;
      case LanguageConceptSwitch.Type:
        return myConceptType;
      case LanguageConceptSwitch.VariableDeclaration:
        return myConceptVariableDeclaration;
      case LanguageConceptSwitch.VariableReference:
        return myConceptVariableReference;
      default:
        return null;
    }
  }


  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForAbstractDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ZoomerScript", "AbstractDeclaration", 0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf74d9bL);
    b.class_(false, true, false);
    // extends: ZoomerScript.structure.ScriptLine
    b.super_(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf8a63eL);
    b.origin("r:2eff7751-2b8f-4ca6-b314-87f3731673ae(ZoomerScript.structure)/8288888793561779611");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAbstractExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ZoomerScript", "AbstractExpression", 0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf36843L);
    b.class_(false, true, false);
    b.origin("r:2eff7751-2b8f-4ca6-b314-87f3731673ae(ZoomerScript.structure)/8288888793561524291");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAbstractFlowOfControl() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ZoomerScript", "AbstractFlowOfControl", 0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb009109L);
    b.class_(false, true, false);
    // extends: ZoomerScript.structure.ScriptLine
    b.super_(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf8a63eL);
    b.origin("r:2eff7751-2b8f-4ca6-b314-87f3731673ae(ZoomerScript.structure)/8288888793562386697");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAddition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ZoomerScript", "Addition", 0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb050053L);
    b.class_(false, false, false);
    // extends: ZoomerScript.structure.NumericExpression
    b.super_(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb04ff3eL);
    b.origin("r:2eff7751-2b8f-4ca6-b314-87f3731673ae(ZoomerScript.structure)/8288888793562677331");
    b.version(3);
    b.aggregate("left", 0x73080c70fb0500afL).target(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf36843L).optional(false).ordered(true).multiple(false).origin("8288888793562677423").done();
    b.aggregate("right", 0x73080c70fb0500e6L).target(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf36843L).optional(false).ordered(true).multiple(false).origin("8288888793562677478").done();
    b.alias("+");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAssignment() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ZoomerScript", "Assignment", 0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fafb311eL);
    b.class_(false, false, false);
    // extends: ZoomerScript.structure.AbstractDeclaration
    b.super_(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf74d9bL);
    b.origin("r:2eff7751-2b8f-4ca6-b314-87f3731673ae(ZoomerScript.structure)/8288888793562034462");
    b.version(3);
    b.aggregate("left", 0x73080c70fafb31b0L).target(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf74f5fL).optional(false).ordered(true).multiple(false).origin("8288888793562034608").done();
    b.aggregate("right", 0x73080c70fafb321aL).target(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf36843L).optional(false).ordered(true).multiple(false).origin("8288888793562034714").done();
    b.alias("=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBooleanConstant() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ZoomerScript", "BooleanConstant", 0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faff6432L);
    b.class_(false, false, false);
    // extends: ZoomerScript.structure.LogicExpression
    b.super_(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb009260L);
    b.origin("r:2eff7751-2b8f-4ca6-b314-87f3731673ae(ZoomerScript.structure)/8288888793562309682");
    b.version(3);
    b.property("value", 0x73080c70faff6467L).type(PrimitiveTypeId.BOOLEAN).origin("8288888793562309735").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBooleanType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ZoomerScript", "BooleanType", 0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faff5d09L);
    b.class_(false, false, false);
    // extends: ZoomerScript.structure.Type
    b.super_(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf56073L);
    b.origin("r:2eff7751-2b8f-4ca6-b314-87f3731673ae(ZoomerScript.structure)/8288888793562307849");
    b.version(3);
    b.alias("fr?");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForComment() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ZoomerScript", "Comment", 0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb099a8dL);
    b.class_(false, false, false);
    // extends: ZoomerScript.structure.ScriptLine
    b.super_(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf8a63eL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x3f05685639c49599L);
    b.origin("r:2eff7751-2b8f-4ca6-b314-87f3731673ae(ZoomerScript.structure)/8288888793562978957");
    b.version(3);
    b.property("text", 0x73080c70fb09a1f1L).type(PrimitiveTypeId.STRING).origin("8288888793562980849").done();
    b.alias("//");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConditionalControl() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ZoomerScript", "ConditionalControl", 0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb00918dL);
    b.class_(false, true, false);
    // extends: ZoomerScript.structure.AbstractFlowOfControl
    b.super_(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb009109L);
    b.origin("r:2eff7751-2b8f-4ca6-b314-87f3731673ae(ZoomerScript.structure)/8288888793562386829");
    b.version(3);
    b.aggregate("condition", 0x73080c70fb0093daL).target(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf36843L).optional(false).ordered(true).multiple(false).origin("8288888793562387418").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDivision() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ZoomerScript", "Division", 0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb07dba6L);
    b.class_(false, false, false);
    // extends: ZoomerScript.structure.NumericExpression
    b.super_(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb04ff3eL);
    b.origin("r:2eff7751-2b8f-4ca6-b314-87f3731673ae(ZoomerScript.structure)/8288888793562864550");
    b.version(3);
    b.aggregate("left", 0x73080c70fb07dba7L).target(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf36843L).optional(false).ordered(true).multiple(false).origin("8288888793562864551").done();
    b.aggregate("right", 0x73080c70fb07dba8L).target(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf36843L).optional(false).ordered(true).multiple(false).origin("8288888793562864552").done();
    b.alias("/");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmptyLine() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ZoomerScript", "EmptyLine", 0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb0baf95L);
    b.class_(false, false, false);
    // extends: ZoomerScript.structure.ScriptLine
    b.super_(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf8a63eL);
    b.origin("r:2eff7751-2b8f-4ca6-b314-87f3731673ae(ZoomerScript.structure)/8288888793563115413");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIf() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ZoomerScript", "If", 0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb00921eL);
    b.class_(false, false, false);
    // extends: ZoomerScript.structure.ConditionalControl
    b.super_(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb00918dL);
    b.origin("r:2eff7751-2b8f-4ca6-b314-87f3731673ae(ZoomerScript.structure)/8288888793562386974");
    b.version(3);
    b.aggregate("trueBlock", 0x73080c70fb0094d6L).target(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf8a63eL).optional(false).ordered(true).multiple(true).origin("8288888793562387670").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIfElse() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ZoomerScript", "IfElse", 0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb039bb4L);
    b.class_(false, false, false);
    // extends: ZoomerScript.structure.If
    b.super_(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb00921eL);
    b.origin("r:2eff7751-2b8f-4ca6-b314-87f3731673ae(ZoomerScript.structure)/8288888793562586036");
    b.version(3);
    b.aggregate("elseBlock", 0x73080c70fb039be9L).target(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf8a63eL).optional(false).ordered(true).multiple(true).origin("8288888793562586089").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLogicExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ZoomerScript", "LogicExpression", 0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb009260L);
    b.class_(false, true, false);
    // extends: ZoomerScript.structure.AbstractExpression
    b.super_(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf36843L);
    b.origin("r:2eff7751-2b8f-4ca6-b314-87f3731673ae(ZoomerScript.structure)/8288888793562387040");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMultiplication() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ZoomerScript", "Multiplication", 0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb07d0b8L);
    b.class_(false, false, false);
    // extends: ZoomerScript.structure.NumericExpression
    b.super_(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb04ff3eL);
    b.origin("r:2eff7751-2b8f-4ca6-b314-87f3731673ae(ZoomerScript.structure)/8288888793562861752");
    b.version(3);
    b.aggregate("left", 0x73080c70fb07d0b9L).target(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf36843L).optional(false).ordered(true).multiple(false).origin("8288888793562861753").done();
    b.aggregate("right", 0x73080c70fb07d0baL).target(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf36843L).optional(false).ordered(true).multiple(false).origin("8288888793562861754").done();
    b.alias("*");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNumericConstant() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ZoomerScript", "NumericConstant", 0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf95ed8L);
    b.class_(false, false, false);
    // extends: ZoomerScript.structure.NumericExpression
    b.super_(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb04ff3eL);
    b.origin("r:2eff7751-2b8f-4ca6-b314-87f3731673ae(ZoomerScript.structure)/8288888793561915096");
    b.version(3);
    b.property("value", 0x73080c70faf95f5bL).type(PrimitiveTypeId.INTEGER).origin("8288888793561915227").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNumericExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ZoomerScript", "NumericExpression", 0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb04ff3eL);
    b.class_(false, true, false);
    // extends: ZoomerScript.structure.AbstractExpression
    b.super_(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf36843L);
    b.origin("r:2eff7751-2b8f-4ca6-b314-87f3731673ae(ZoomerScript.structure)/8288888793562677054");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNumericType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ZoomerScript", "NumericType", 0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf560ddL);
    b.class_(false, false, false);
    // extends: ZoomerScript.structure.Type
    b.super_(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf56073L);
    b.origin("r:2eff7751-2b8f-4ca6-b314-87f3731673ae(ZoomerScript.structure)/8288888793561653469");
    b.version(3);
    b.alias("num");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForScript() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ZoomerScript", "Script", 0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf36806L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0x4caf0310491e41f5L, 0x8a9b2006b3a94898L, 0x40c1a7cb987d20d5L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x33d23ee961a0cbf3L);
    b.origin("r:2eff7751-2b8f-4ca6-b314-87f3731673ae(ZoomerScript.structure)/8288888793561524230");
    b.version(3);
    b.aggregate("body", 0x73080c70faf36880L).target(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf8a63eL).optional(true).ordered(true).multiple(true).origin("8288888793561524352").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForScriptLine() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ZoomerScript", "ScriptLine", 0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf8a63eL);
    b.class_(false, true, false);
    b.origin("r:2eff7751-2b8f-4ca6-b314-87f3731673ae(ZoomerScript.structure)/8288888793561867838");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSubtraction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ZoomerScript", "Subtraction", 0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb07b9c3L);
    b.class_(false, false, false);
    // extends: ZoomerScript.structure.NumericExpression
    b.super_(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70fb04ff3eL);
    b.origin("r:2eff7751-2b8f-4ca6-b314-87f3731673ae(ZoomerScript.structure)/8288888793562855875");
    b.version(3);
    b.aggregate("left", 0x73080c70fb07b9c4L).target(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf36843L).optional(false).ordered(true).multiple(false).origin("8288888793562855876").done();
    b.aggregate("right", 0x73080c70fb07b9c5L).target(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf36843L).optional(false).ordered(true).multiple(false).origin("8288888793562855877").done();
    b.alias("-");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ZoomerScript", "Type", 0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf56073L);
    b.class_(false, true, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x11f8a0774f2L);
    b.origin("r:2eff7751-2b8f-4ca6-b314-87f3731673ae(ZoomerScript.structure)/8288888793561653363");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVariableDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ZoomerScript", "VariableDeclaration", 0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf68f6eL);
    b.class_(false, false, false);
    // extends: ZoomerScript.structure.AbstractDeclaration
    b.super_(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf74d9bL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:2eff7751-2b8f-4ca6-b314-87f3731673ae(ZoomerScript.structure)/8288888793561730926");
    b.version(3);
    b.aggregate("type", 0x73080c70faf6901bL).target(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf56073L).optional(false).ordered(true).multiple(false).origin("8288888793561731099").done();
    b.aggregate("initialization", 0x73080c70faf6c9acL).target(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf36843L).optional(false).ordered(true).multiple(false).origin("8288888793561745836").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVariableReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ZoomerScript", "VariableReference", 0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf74f5fL);
    b.class_(false, false, false);
    // extends: ZoomerScript.structure.AbstractExpression
    b.super_(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf36843L);
    b.origin("r:2eff7751-2b8f-4ca6-b314-87f3731673ae(ZoomerScript.structure)/8288888793561780063");
    b.version(3);
    b.associate("target", 0x73080c70faf74fafL).target(0x7cb4518a20f54c01L, 0x8fe1dda960632cd1L, 0x73080c70faf68f6eL).optional(false).origin("8288888793561780143").done();
    return b.create();
  }
}
